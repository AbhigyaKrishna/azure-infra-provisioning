#!/usr/bin/env groovy

pipeline {
    agent {
        label 'linux'
    }

    parameters {
        string(
            name: 'ENVIRONMENT',
            defaultValue: 'dev',
            description: 'Target environment'
        )
        string(
            name: 'BASTION_IP',
            defaultValue: '',
            description: 'Bastion host IP address'
        )
        string(
            name: 'VM_IPS',
            defaultValue: '',
            description: 'Space-separated list of VM private IPs'
        )
    }

    environment {
        ADMIN_USER = 'azureuser'
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: '30'))
        timestamps()
        timeout(time: 30, unit: 'MINUTES')
    }

    stages {
        stage('Validate Parameters') {
            steps {
                script {
                    if (!params.BASTION_IP || params.BASTION_IP.isEmpty()) {
                        error "BASTION_IP parameter is required"
                    }
                    if (!params.VM_IPS || params.VM_IPS.isEmpty()) {
                        error "VM_IPS parameter is required"
                    }
                    echo "Deployment parameters validated successfully"
                    echo "Bastion IP: ${params.BASTION_IP}"
                    echo "VM IPs: ${params.VM_IPS}"
                }
            }
        }
        
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build Docker Image') {
            steps {
                dir('app') {
                    script {
                        def imageName = "nginx-app-${params.ENVIRONMENT}"
                        def imageTag = "${env.BUILD_NUMBER}"
                        
                        sh """
                            docker build -t ${imageName}:${imageTag} .
                            docker tag ${imageName}:${imageTag} ${imageName}:latest
                            docker save ${imageName}:${imageTag} -o ${WORKSPACE}/nginx-app.tar
                        """
                    }
                }
                archiveArtifacts artifacts: 'nginx-app.tar', fingerprint: true
            }
        }

        stage('Package App Files') {
            steps {
                dir('app') {
                    sh """
                        tar -czf ${WORKSPACE}/app-files.tar.gz \
                            docker-compose.yml \
                            Dockerfile \
                            nginx.conf \
                            index.html \
                            generate-ssl.sh
                    """
                }
            }
        }

        stage('Deploy to VMs') {
            steps {
                script {
                    // Setup SSH
                    sh """
                        mkdir -p ~/.ssh
                        chmod 700 ~/.ssh
                        ssh-keyscan -H ${params.BASTION_IP} >> ~/.ssh/known_hosts 2>/dev/null || true
                    """

                    // Copy artifacts to bastion
                    sshagent(credentials: ['azure-ssh-key']) {
                        sh """
                            scp -o StrictHostKeyChecking=no \
                                ${WORKSPACE}/nginx-app.tar \
                                ${WORKSPACE}/app-files.tar.gz \
                                \${ADMIN_USER}@${params.BASTION_IP}:/tmp/
                        """
                    }

                    // Extract app files on bastion
                    sshagent(credentials: ['azure-ssh-key']) {
                        sh """
                            ssh -o StrictHostKeyChecking=no \
                                \${ADMIN_USER}@${params.BASTION_IP} \
                                'mkdir -p /tmp/app && tar -xzf /tmp/app-files.tar.gz -C /tmp/app'
                        """
                    }

                    // Create deployment script
                    writeFile file: 'deploy-docker-to-vm.sh', text: '''#!/bin/bash
set -e

VM_IP=$1
ADMIN_USER=$2

echo "Deploying to VM: $VM_IP"

# Transfer files to target VM
scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \\
    -r /tmp/nginx-app.tar /tmp/app ${ADMIN_USER}@${VM_IP}:/tmp/

# Execute deployment on VM
ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \\
    ${ADMIN_USER}@${VM_IP} 'bash -s' <<'DEPLOY_SCRIPT'
set -e

if ! command -v docker &> /dev/null; then
    echo "Installing Docker..."
    curl -fsSL https://get.docker.com -o get-docker.sh
    sudo sh get-docker.sh
    sudo usermod -aG docker $USER
    sudo systemctl enable docker
    sudo systemctl start docker
fi

if ! command -v docker-compose &> /dev/null; then
    echo "Installing Docker Compose..."
    sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    sudo chmod +x /usr/local/bin/docker-compose
fi

echo "Loading Docker image..."
sudo docker load -i /tmp/nginx-app.tar

echo "Deploying with Docker Compose..."
cd /tmp/app
sudo docker-compose down || true
sudo docker-compose up -d

echo "Verifying deployment..."
sleep 5
sudo docker ps

echo "Deployment completed successfully on $(hostname)"
DEPLOY_SCRIPT

echo "Deployment to $VM_IP completed"
'''

                    // Copy deployment script to bastion
                    sh "chmod +x deploy-docker-to-vm.sh"
                    sshagent(credentials: ['azure-ssh-key']) {
                        sh """
                            scp -o StrictHostKeyChecking=no \
                                deploy-docker-to-vm.sh \
                                \${ADMIN_USER}@${params.BASTION_IP}:/tmp/
                        """
                    }

                    // Execute deployment on all VMs
                    sshagent(credentials: ['azure-ssh-key']) {
                        sh """
                            ssh -o StrictHostKeyChecking=no \
                                \${ADMIN_USER}@${params.BASTION_IP} 'bash -s' <<'EOF'
set -e
chmod +x /tmp/deploy-docker-to-vm.sh

for VM_IP in ${params.VM_IPS}; do
    echo "================================"
    echo "Deploying to VM: \$VM_IP"
    echo "================================"
    /tmp/deploy-docker-to-vm.sh \$VM_IP ${ADMIN_USER}
done

echo "================================"
echo "All deployments completed!"
echo "================================"
EOF
                        """
                    }
                }
            }
        }
    }

    post {
        success {
            echo "Docker deployment completed successfully!"
        }
        failure {
            echo "Docker deployment failed!"
        }
        always {
            sh 'docker system prune -f || true'
            cleanWs()
        }
    }
}
